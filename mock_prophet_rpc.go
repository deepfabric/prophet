// Code generated by MockGen. DO NOT EDIT.
// Source: ./prophet_rpc.go

// Package prophet is a generated GoMock package.
package prophet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRPC is a mock of RPC interface
type MockRPC struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMockRecorder
}

// MockRPCMockRecorder is the mock recorder for MockRPC
type MockRPCMockRecorder struct {
	mock *MockRPC
}

// NewMockRPC creates a new mock instance
func NewMockRPC(ctrl *gomock.Controller) *MockRPC {
	mock := &MockRPC{ctrl: ctrl}
	mock.recorder = &MockRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPC) EXPECT() *MockRPCMockRecorder {
	return m.recorder
}

// TiggerContainerHeartbeat mocks base method
func (m *MockRPC) TiggerContainerHeartbeat() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TiggerContainerHeartbeat")
}

// TiggerContainerHeartbeat indicates an expected call of TiggerContainerHeartbeat
func (mr *MockRPCMockRecorder) TiggerContainerHeartbeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TiggerContainerHeartbeat", reflect.TypeOf((*MockRPC)(nil).TiggerContainerHeartbeat))
}

// TiggerResourceHeartbeat mocks base method
func (m *MockRPC) TiggerResourceHeartbeat(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TiggerResourceHeartbeat", id)
}

// TiggerResourceHeartbeat indicates an expected call of TiggerResourceHeartbeat
func (mr *MockRPCMockRecorder) TiggerResourceHeartbeat(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TiggerResourceHeartbeat", reflect.TypeOf((*MockRPC)(nil).TiggerResourceHeartbeat), id)
}

// AllocID mocks base method
func (m *MockRPC) AllocID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocID indicates an expected call of AllocID
func (mr *MockRPCMockRecorder) AllocID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocID", reflect.TypeOf((*MockRPC)(nil).AllocID))
}

// AskSplit mocks base method
func (m *MockRPC) AskSplit(res Resource) (uint64, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskSplit", res)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AskSplit indicates an expected call of AskSplit
func (mr *MockRPCMockRecorder) AskSplit(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskSplit", reflect.TypeOf((*MockRPC)(nil).AskSplit), res)
}
