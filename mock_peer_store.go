// Code generated by MockGen. DO NOT EDIT.
// Source: ./peer_store.go

// Package prophet is a generated GoMock package.
package prophet

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResourceStore is a mock of ResourceStore interface
type MockResourceStore struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStoreMockRecorder
}

// MockResourceStoreMockRecorder is the mock recorder for MockResourceStore
type MockResourceStoreMockRecorder struct {
	mock *MockResourceStore
}

// NewMockResourceStore creates a new mock instance
func NewMockResourceStore(ctrl *gomock.Controller) *MockResourceStore {
	mock := &MockResourceStore{ctrl: ctrl}
	mock.recorder = &MockResourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceStore) EXPECT() *MockResourceStoreMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockResourceStore) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockResourceStoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockResourceStore)(nil).Start))
}

// Meta mocks base method
func (m *MockResourceStore) Meta() Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(Container)
	return ret0
}

// Meta indicates an expected call of Meta
func (mr *MockResourceStoreMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockResourceStore)(nil).Meta))
}

// GetTransport mocks base method
func (m *MockResourceStore) GetTransport() ReplicaTransport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransport")
	ret0, _ := ret[0].(ReplicaTransport)
	return ret0
}

// GetTransport indicates an expected call of GetTransport
func (mr *MockResourceStoreMockRecorder) GetTransport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransport", reflect.TypeOf((*MockResourceStore)(nil).GetTransport))
}

// GetContainerAddr mocks base method
func (m *MockResourceStore) GetContainerAddr(arg0 uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerAddr", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerAddr indicates an expected call of GetContainerAddr
func (mr *MockResourceStoreMockRecorder) GetContainerAddr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerAddr", reflect.TypeOf((*MockResourceStore)(nil).GetContainerAddr), arg0)
}

// HandleReplicaMsg mocks base method
func (m *MockResourceStore) HandleReplicaMsg(arg0 interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleReplicaMsg", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// HandleReplicaMsg indicates an expected call of HandleReplicaMsg
func (mr *MockResourceStoreMockRecorder) HandleReplicaMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReplicaMsg", reflect.TypeOf((*MockResourceStore)(nil).HandleReplicaMsg), arg0)
}

// ForeachReplica mocks base method
func (m *MockResourceStore) ForeachReplica(arg0 func(*PeerReplica) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForeachReplica", arg0)
}

// ForeachReplica indicates an expected call of ForeachReplica
func (mr *MockResourceStoreMockRecorder) ForeachReplica(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForeachReplica", reflect.TypeOf((*MockResourceStore)(nil).ForeachReplica), arg0)
}

// GetPeerReplica mocks base method
func (m *MockResourceStore) GetPeerReplica(id uint64, leader bool) *PeerReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerReplica", id, leader)
	ret0, _ := ret[0].(*PeerReplica)
	return ret0
}

// GetPeerReplica indicates an expected call of GetPeerReplica
func (mr *MockResourceStoreMockRecorder) GetPeerReplica(id, leader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerReplica", reflect.TypeOf((*MockResourceStore)(nil).GetPeerReplica), id, leader)
}

// AddReplica mocks base method
func (m *MockResourceStore) AddReplica(arg0 *PeerReplica) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddReplica", arg0)
}

// AddReplica indicates an expected call of AddReplica
func (mr *MockResourceStoreMockRecorder) AddReplica(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockResourceStore)(nil).AddReplica), arg0)
}

// RemoveReplica mocks base method
func (m *MockResourceStore) RemoveReplica(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveReplica", id)
}

// RemoveReplica indicates an expected call of RemoveReplica
func (mr *MockResourceStoreMockRecorder) RemoveReplica(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockResourceStore)(nil).RemoveReplica), id)
}

// MustStartTask mocks base method
func (m *MockResourceStore) MustStartTask(arg0 func(context.Context)) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustStartTask", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MustStartTask indicates an expected call of MustStartTask
func (mr *MockResourceStoreMockRecorder) MustStartTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustStartTask", reflect.TypeOf((*MockResourceStore)(nil).MustStartTask), arg0)
}

// MustStopTask mocks base method
func (m *MockResourceStore) MustStopTask(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustStopTask", arg0)
}

// MustStopTask indicates an expected call of MustStopTask
func (mr *MockResourceStoreMockRecorder) MustStopTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustStopTask", reflect.TypeOf((*MockResourceStore)(nil).MustStopTask), arg0)
}

// LocalStore mocks base method
func (m *MockResourceStore) LocalStore() LocalStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalStore")
	ret0, _ := ret[0].(LocalStore)
	return ret0
}

// LocalStore indicates an expected call of LocalStore
func (mr *MockResourceStoreMockRecorder) LocalStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalStore", reflect.TypeOf((*MockResourceStore)(nil).LocalStore))
}
