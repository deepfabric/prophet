// Code generated by MockGen. DO NOT EDIT.
// Source: ./peer_replica.go

// Package prophet is a generated GoMock package.
package prophet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPeerReplicaHandler is a mock of PeerReplicaHandler interface
type MockPeerReplicaHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPeerReplicaHandlerMockRecorder
}

// MockPeerReplicaHandlerMockRecorder is the mock recorder for MockPeerReplicaHandler
type MockPeerReplicaHandlerMockRecorder struct {
	mock *MockPeerReplicaHandler
}

// NewMockPeerReplicaHandler creates a new mock instance
func NewMockPeerReplicaHandler(ctrl *gomock.Controller) *MockPeerReplicaHandler {
	mock := &MockPeerReplicaHandler{ctrl: ctrl}
	mock.recorder = &MockPeerReplicaHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPeerReplicaHandler) EXPECT() *MockPeerReplicaHandlerMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockPeerReplicaHandler) AddPeer(arg0 Resource, arg1 Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", arg0, arg1)
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockPeerReplicaHandlerMockRecorder) AddPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockPeerReplicaHandler)(nil).AddPeer), arg0, arg1)
}

// RemovePeer mocks base method
func (m *MockPeerReplicaHandler) RemovePeer(arg0 Resource, arg1 Peer) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockPeerReplicaHandlerMockRecorder) RemovePeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockPeerReplicaHandler)(nil).RemovePeer), arg0, arg1)
}

// Scale mocks base method
func (m *MockPeerReplicaHandler) Scale(arg0 Resource, arg1 interface{}) (bool, []*PeerReplica) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]*PeerReplica)
	return ret0, ret1
}

// Scale indicates an expected call of Scale
func (mr *MockPeerReplicaHandlerMockRecorder) Scale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockPeerReplicaHandler)(nil).Scale), arg0, arg1)
}

// Heartbeat mocks base method
func (m *MockPeerReplicaHandler) Heartbeat(arg0 Resource) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat
func (mr *MockPeerReplicaHandlerMockRecorder) Heartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockPeerReplicaHandler)(nil).Heartbeat), arg0)
}

// Destory mocks base method
func (m *MockPeerReplicaHandler) Destory(arg0 Resource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destory", arg0)
}

// Destory indicates an expected call of Destory
func (mr *MockPeerReplicaHandlerMockRecorder) Destory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destory", reflect.TypeOf((*MockPeerReplicaHandler)(nil).Destory), arg0)
}

// ResourceBecomeLeader mocks base method
func (m *MockPeerReplicaHandler) ResourceBecomeLeader(arg0 Resource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResourceBecomeLeader", arg0)
}

// ResourceBecomeLeader indicates an expected call of ResourceBecomeLeader
func (mr *MockPeerReplicaHandlerMockRecorder) ResourceBecomeLeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceBecomeLeader", reflect.TypeOf((*MockPeerReplicaHandler)(nil).ResourceBecomeLeader), arg0)
}

// ResourceBecomeFollower mocks base method
func (m *MockPeerReplicaHandler) ResourceBecomeFollower(arg0 Resource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResourceBecomeFollower", arg0)
}

// ResourceBecomeFollower indicates an expected call of ResourceBecomeFollower
func (mr *MockPeerReplicaHandlerMockRecorder) ResourceBecomeFollower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceBecomeFollower", reflect.TypeOf((*MockPeerReplicaHandler)(nil).ResourceBecomeFollower), arg0)
}
