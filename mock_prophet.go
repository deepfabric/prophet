// Code generated by MockGen. DO NOT EDIT.
// Source: ./prophet.go

// Package prophet is a generated GoMock package.
package prophet

import (
	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/clientv3"
	reflect "reflect"
	time "time"
)

// MockRoleChangeHandler is a mock of RoleChangeHandler interface
type MockRoleChangeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRoleChangeHandlerMockRecorder
}

// MockRoleChangeHandlerMockRecorder is the mock recorder for MockRoleChangeHandler
type MockRoleChangeHandlerMockRecorder struct {
	mock *MockRoleChangeHandler
}

// NewMockRoleChangeHandler creates a new mock instance
func NewMockRoleChangeHandler(ctrl *gomock.Controller) *MockRoleChangeHandler {
	mock := &MockRoleChangeHandler{ctrl: ctrl}
	mock.recorder = &MockRoleChangeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleChangeHandler) EXPECT() *MockRoleChangeHandlerMockRecorder {
	return m.recorder
}

// ProphetBecomeLeader mocks base method
func (m *MockRoleChangeHandler) ProphetBecomeLeader() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProphetBecomeLeader")
}

// ProphetBecomeLeader indicates an expected call of ProphetBecomeLeader
func (mr *MockRoleChangeHandlerMockRecorder) ProphetBecomeLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProphetBecomeLeader", reflect.TypeOf((*MockRoleChangeHandler)(nil).ProphetBecomeLeader))
}

// ProphetBecomeFollower mocks base method
func (m *MockRoleChangeHandler) ProphetBecomeFollower() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProphetBecomeFollower")
}

// ProphetBecomeFollower indicates an expected call of ProphetBecomeFollower
func (mr *MockRoleChangeHandlerMockRecorder) ProphetBecomeFollower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProphetBecomeFollower", reflect.TypeOf((*MockRoleChangeHandler)(nil).ProphetBecomeFollower))
}

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// NewResource mocks base method
func (m *MockAdapter) NewResource() Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResource")
	ret0, _ := ret[0].(Resource)
	return ret0
}

// NewResource indicates an expected call of NewResource
func (mr *MockAdapterMockRecorder) NewResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResource", reflect.TypeOf((*MockAdapter)(nil).NewResource))
}

// NewContainer mocks base method
func (m *MockAdapter) NewContainer() Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContainer")
	ret0, _ := ret[0].(Container)
	return ret0
}

// NewContainer indicates an expected call of NewContainer
func (mr *MockAdapterMockRecorder) NewContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockAdapter)(nil).NewContainer))
}

// FetchLeaderResources mocks base method
func (m *MockAdapter) FetchLeaderResources() []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLeaderResources")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// FetchLeaderResources indicates an expected call of FetchLeaderResources
func (mr *MockAdapterMockRecorder) FetchLeaderResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLeaderResources", reflect.TypeOf((*MockAdapter)(nil).FetchLeaderResources))
}

// FetchResourceHB mocks base method
func (m *MockAdapter) FetchResourceHB(id uint64) *ResourceHeartbeatReq {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchResourceHB", id)
	ret0, _ := ret[0].(*ResourceHeartbeatReq)
	return ret0
}

// FetchResourceHB indicates an expected call of FetchResourceHB
func (mr *MockAdapterMockRecorder) FetchResourceHB(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchResourceHB", reflect.TypeOf((*MockAdapter)(nil).FetchResourceHB), id)
}

// FetchContainerHB mocks base method
func (m *MockAdapter) FetchContainerHB() *ContainerHeartbeatReq {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchContainerHB")
	ret0, _ := ret[0].(*ContainerHeartbeatReq)
	return ret0
}

// FetchContainerHB indicates an expected call of FetchContainerHB
func (mr *MockAdapterMockRecorder) FetchContainerHB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchContainerHB", reflect.TypeOf((*MockAdapter)(nil).FetchContainerHB))
}

// ResourceHBInterval mocks base method
func (m *MockAdapter) ResourceHBInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceHBInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ResourceHBInterval indicates an expected call of ResourceHBInterval
func (mr *MockAdapterMockRecorder) ResourceHBInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceHBInterval", reflect.TypeOf((*MockAdapter)(nil).ResourceHBInterval))
}

// ContainerHBInterval mocks base method
func (m *MockAdapter) ContainerHBInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerHBInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ContainerHBInterval indicates an expected call of ContainerHBInterval
func (mr *MockAdapterMockRecorder) ContainerHBInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerHBInterval", reflect.TypeOf((*MockAdapter)(nil).ContainerHBInterval))
}

// HBHandler mocks base method
func (m *MockAdapter) HBHandler() HeartbeatHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HBHandler")
	ret0, _ := ret[0].(HeartbeatHandler)
	return ret0
}

// HBHandler indicates an expected call of HBHandler
func (mr *MockAdapterMockRecorder) HBHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HBHandler", reflect.TypeOf((*MockAdapter)(nil).HBHandler))
}

// MockProphet is a mock of Prophet interface
type MockProphet struct {
	ctrl     *gomock.Controller
	recorder *MockProphetMockRecorder
}

// MockProphetMockRecorder is the mock recorder for MockProphet
type MockProphetMockRecorder struct {
	mock *MockProphet
}

// NewMockProphet creates a new mock instance
func NewMockProphet(ctrl *gomock.Controller) *MockProphet {
	mock := &MockProphet{ctrl: ctrl}
	mock.recorder = &MockProphetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProphet) EXPECT() *MockProphetMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockProphet) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockProphetMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProphet)(nil).Start))
}

// Stop mocks base method
func (m *MockProphet) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockProphetMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProphet)(nil).Stop))
}

// GetStore mocks base method
func (m *MockProphet) GetStore() Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(Store)
	return ret0
}

// GetStore indicates an expected call of GetStore
func (mr *MockProphetMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockProphet)(nil).GetStore))
}

// GetRPC mocks base method
func (m *MockProphet) GetRPC() RPC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPC")
	ret0, _ := ret[0].(RPC)
	return ret0
}

// GetRPC indicates an expected call of GetRPC
func (mr *MockProphetMockRecorder) GetRPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPC", reflect.TypeOf((*MockProphet)(nil).GetRPC))
}

// GetEtcdClient mocks base method
func (m *MockProphet) GetEtcdClient() *clientv3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtcdClient")
	ret0, _ := ret[0].(*clientv3.Client)
	return ret0
}

// GetEtcdClient indicates an expected call of GetEtcdClient
func (mr *MockProphetMockRecorder) GetEtcdClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtcdClient", reflect.TypeOf((*MockProphet)(nil).GetEtcdClient))
}

// StorageNode mocks base method
func (m *MockProphet) StorageNode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StorageNode indicates an expected call of StorageNode
func (mr *MockProphetMockRecorder) StorageNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNode", reflect.TypeOf((*MockProphet)(nil).StorageNode))
}
