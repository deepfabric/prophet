package prophet

import (
	"flag"
)

var (
	prophetAddr                             = flag.String("prophet-addr", "127.0.0.1:9529", "Prophet: rpc address")
	prophetClientAddrs                      = flag.String("prophet-addr-client", "http://127.0.0.1:2371", "Prophet: client urls")
	prophetNamespace                        = flag.String("prophet-namespace", "/prophet", "Prophet: namespace")
	prophetURLsClient                       = flag.String("prophet-urls-client", "http://127.0.0.1:2371", "Prophet: embed etcd client urls")
	prophetURLsAdvertiseClient              = flag.String("prophet-urls-advertise-client", "", "Prophet: embed etcd client advertise urls")
	prophetURLsPeer                         = flag.String("prophet-urls-peer", "http://127.0.0.1:2381", "Prophet: embed etcd peer urls")
	prophetURLsAdvertisePeer                = flag.String("prophet-urls-advertise-peer", "", "Prophet: embed etcd peer advertise urls")
	prophetInitialCluster                   = flag.String("prophet-initial-cluster", "node1=http://127.0.0.1:2381", "Prophet: embed etcd initial cluster")
	prophetInitialClusterState              = flag.String("prophet-initial-cluster-state", "new", "Prophet: embed etcd initial cluster state")
	prophetLocationLabel                    = flag.String("prophet-location-label", "zone,rack", "Prophet: store location label name")
	prophetLeaderLeaseTTLSec                = flag.Int64("prophet-leader-lease", 5, "Prophet: seconds of leader lease ttl")
	prophetScheduleRetries                  = flag.Int("prophet-schedule-max-retry", 3, "Prophet: max schedule retries times when schedule failed")
	prophetScheduleMaxIntervalSec           = flag.Int("prophet-schedule-max-interval", 60, "Prophet: maximum seconds between twice schedules")
	prophetScheduleMinIntervalMS            = flag.Int("prophet-schedule-min-interval", 10, "Prophet: minimum millisecond between twice schedules")
	prophetTimeoutWaitOperatorCompleteMin   = flag.Int("prophet-timeout-wait-operator", 5, "Prophet: timeout for waitting teh operator complete")
	prophetMaxFreezeScheduleIntervalSec     = flag.Int("prophet-schedule-max-freeze-interval", 30, "Prophet: maximum seconds freeze the container for a while if no need to schedule")
	prophetMaxAllowContainerDownDurationMin = flag.Int("prophet-max-allow-container-down", 60, "Prophet: maximum container down mins, the container will removed from replicas")
	prophetMaxRebalanceLeader               = flag.Uint64("prophet-max-rebalance-leader", 16, "Prophet: maximum count of transfer leader operator")
	prophetMaxRebalanceReplica              = flag.Uint64("prophet-max-rebalance-replica", 12, "Prophet: maximum count of remove|add replica operator")
	prophetMaxScheduleReplica               = flag.Uint64("prophet-schedule-max-replica", 12, "Prophet: maximum count of schedule replica operator")
	prophetMaxLimitSnapshotsCount           = flag.Uint64("prophet-max-snapshot", 3, "Prophet: maximum count of node about snapshot with schedule")
	prophetCountResourceReplicas            = flag.Int("prophet-resource-replica", 3, "Prophet: replica number per resource")
	prophetMinAvailableStorageUsedRate      = flag.Int("prophet-min-storage", 80, "Prophet: minimum storage used rate of container, if the rate is over this value, skip the container")
	prophetMaxRPCConns                      = flag.Int("prophet-rpc-conns", 10, "Prophet: maximum connections for rpc")
	prophetRPCConnIdleSec                   = flag.Int("prophet-rpc-idle", 60*60, "Prophet(Sec): maximum idle time for rpc connection")
	prophetRPCTimeoutSec                    = flag.Int("prophet-rpc-timeout", 10, "Prophet(Sec): maximum timeout to wait rpc response")
	prophetStorageNode                      = flag.Bool("prophet-storage", true, "Prophet: is storage node, if true enable embed etcd server")
)
